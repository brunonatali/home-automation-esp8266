
class TouchIOButton 
{
  public:
    TouchIOButton();
    int x = 10;
  private:
    static TouchIOButton *instance;
    /*
      Store touch buttons pins
      Using 6 pins to handle 6 touch buttons
    */
    int _buttonPin[6] = {4, 5, 12, 13, 14, 16};
    
    /*
      Store button`s last state
    */
    int _lastState[6] = {0, 0, 0, 0, 0, 0};
    
    ICACHE_RAM_ATTR void buttonHasChanged(int buttonIndex);
    static void callbackTouch0();
    static void callbackTouch1();
    static void callbackTouch2();
    static void callbackTouch3();
    static void callbackTouch4();
    static void callbackTouch5();
};

TouchIOButton::TouchIOButton() 
{
  Serial.print("Initializing buttons:");
  instance = this;
  Serial.print(" 0->");
  Serial.print((int) _buttonPin[0]);
  pinMode(_buttonPin[0], INPUT);
  attachInterrupt(digitalPinToInterrupt(_buttonPin[0]), callbackTouch0, CHANGE);

  Serial.print(", 1->");
  Serial.print((int) _buttonPin[1]);
  pinMode(_buttonPin[1], INPUT);
  attachInterrupt(digitalPinToInterrupt(_buttonPin[1]), callbackTouch1, CHANGE);
  
  Serial.print(", 2->");
  Serial.print((int) _buttonPin[2]);
  pinMode(_buttonPin[2], INPUT);
  attachInterrupt(digitalPinToInterrupt(_buttonPin[2]), callbackTouch2, CHANGE);

  Serial.print(", 3->");
  Serial.print((int) _buttonPin[3]);
  pinMode(_buttonPin[3], INPUT);
  attachInterrupt(digitalPinToInterrupt(_buttonPin[3]), callbackTouch3, CHANGE);
  
  Serial.print(", 4->");
  Serial.print((int) _buttonPin[4]);
  pinMode(_buttonPin[4], INPUT);
  attachInterrupt(digitalPinToInterrupt(_buttonPin[4]), callbackTouch4, CHANGE);
  
  Serial.print(", 5->");
  Serial.print((int) _buttonPin[5]);
  pinMode(_buttonPin[5], INPUT);
  attachInterrupt(digitalPinToInterrupt(_buttonPin[5]), callbackTouch5, CHANGE);
  
  Serial.println("");
}

ICACHE_RAM_ATTR void TouchIOButton::buttonHasChanged(int buttonIndex)
{
#ifdef _serialDebug
  Serial.print("Button: ");
  Serial.print((int) buttonIndex);
  Serial.println(" touched");
#endif
}

void TouchIOButton::callbackTouch0() 
{
  Serial.println("1 callback btn 0");
  digitalWrite(LED_BUILTIN, LOW);
  delay(1000);
  digitalWrite(LED_BUILTIN, HIGH);
  instance->buttonHasChanged(0);
}

void TouchIOButton::callbackTouch1() 
{
  Serial.println("1 callback btn 1");
  digitalWrite(LED_BUILTIN, LOW);
  delay(1000);
  digitalWrite(LED_BUILTIN, HIGH);
  instance->buttonHasChanged(1);
}

void TouchIOButton::callbackTouch2() 
{
  Serial.println("1 callback btn 2");
  digitalWrite(LED_BUILTIN, LOW);
  delay(1000);
  digitalWrite(LED_BUILTIN, HIGH);
  instance->buttonHasChanged(2);
}

void TouchIOButton::callbackTouch3() 
{
  Serial.println("1 callback btn 3");
  digitalWrite(LED_BUILTIN, LOW);
  delay(1000);
  digitalWrite(LED_BUILTIN, HIGH);
  instance->buttonHasChanged(3);
}

void TouchIOButton::callbackTouch4() 
{
  Serial.println("1 callback btn 4");
  digitalWrite(LED_BUILTIN, LOW);
  delay(1000);
  digitalWrite(LED_BUILTIN, HIGH);
  instance->buttonHasChanged(4);
}

void TouchIOButton::callbackTouch5() 
{
  Serial.println("1 callback btn 5");
  digitalWrite(LED_BUILTIN, LOW);
  delay(1000);
  digitalWrite(LED_BUILTIN, HIGH);
  instance->buttonHasChanged(5);
}




//////////////////// --------------->>>> FORMA QUE COMPILA:



struct callable {
    void (*callback)(void);
};

class TouchIOButton
{
  public:
    TouchIOButton(int pin);
    void dot();
    void dash();
  private:
    int _pin = LED_BUILTIN;
    int _buttonPin[6] = {4, 5, 12, 13, 14, 16};
    int _lastState[6] = {0, 0, 0, 0, 0, 0};
    callable _btnCallback[6];
    ICACHE_RAM_ATTR void buttonHasChanged(int buttonIndex);
};

TouchIOButton::TouchIOButton(int pin)
{
  Serial.print("Initializing buttons:");
  static TouchIOButton* _instance = this;
  Serial.print(" 0->");
  Serial.print((int) _buttonPin[0]);
  pinMode(_buttonPin[0], INPUT);

  _btnCallback[0].callback = []() {
    Serial.println("1 callback btn 0");
    digitalWrite(LED_BUILTIN, LOW);
    delay(1000);
    digitalWrite(LED_BUILTIN, HIGH);
    //_instance->buttonHasChanged(0);
  };
  attachInterrupt(digitalPinToInterrupt(_buttonPin[0]), _btnCallback[0].callback, CHANGE);
  
  Serial.println("");
}

ICACHE_RAM_ATTR void TouchIOButton::buttonHasChanged(int buttonIndex)
{
#ifdef _serialDebug
  Serial.print("Button: ");
  Serial.print((int) buttonIndex);
  Serial.println(" touched");
#endif
}

void TouchIOButton::dot()
{
  digitalWrite(_pin, HIGH);
  delay(250);
  digitalWrite(_pin, LOW);
  delay(250);  
}

void TouchIOButton::dash()
{
  digitalWrite(_pin, HIGH);
  delay(1000);
  digitalWrite(_pin, LOW);
  delay(250);
}

